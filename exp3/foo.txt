new z3walker
<Module> test/foo.ll, size is 8
---------
<Func> abs: arg i
  <BB> entry
    visit icmp
in slt
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit sub
    visit br
  <BB> if.end
    visit phi
tar: (sub i)branch cond: (and true true (= (cmp i) #b1))
tar: ibranch cond: (and true true (= (cmp i) #b0))
---------
<Func> foo1: arg i
  <BB> entry
    visit and
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun and ((_ BitVec 32)) (_ BitVec 32))
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (and true true (forall ((i (_ BitVec 32))) (= (and i) (bvand i #x000003ff)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (idxprom i) ((_ sign_extend 32) (and i))))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (and true true (forall ((i (_ BitVec 32))) (= (and i) (bvand i #x000003ff))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (idxprom i) ((_ sign_extend 32) (and i))))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
---------
<Func> foo2: arg i
  <BB> entry
    visit icmp
    visit br
  <BB> land.lhs.true
    visit icmp
in slt
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun cmp ((_ BitVec 32)) (_ BitVec 1))
(declare-fun land.lhs.true ((_ BitVec 32)) Bool)
(declare-fun i () (_ BitVec 32))
(declare-fun cmp1 ((_ BitVec 32)) (_ BitVec 1))
(declare-fun if.else ((_ BitVec 32)) Bool)
(declare-fun if.then ((_ BitVec 32)) Bool)
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
  (and (and true true) (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp1 i) (ite (bvslt i #x00000400) #b1 #b0)))))
  (and true true (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
  (and (and true true) (= (cmp i) #b0) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.then i)
                (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1)))
(assert (and true
     true
     (= (cmp i) #b1)
     (= (cmp1 i) #b1)
     (forall ((i (_ BitVec 32))) (= (idxprom i) ((_ sign_extend 32) i)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
    (and (and true true) (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp1 i) (ite (bvslt i #x00000400) #b1 #b0)))))
    (and true true (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
    (and (and true true) (= (cmp i) #b0) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.then i)
                  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
    (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1))
  (and true
       true
       (= (cmp i) #b1)
       (= (cmp1 i) #b1)
       (forall ((i (_ BitVec 32))) (= (idxprom i) ((_ sign_extend 32) i))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
    visit br
  <BB> return
    visit phi
tar: (%0 i)branch cond: (and true true (= (cmp i) #b1) (= (cmp1 i) #b1))
tar: #xffffffffbranch cond: (and true true (= (cmp i) #b0))
---------
<Func> foo3: arg i
  <BB> entry
    visit icmp
    visit br
  <BB> land.lhs.true
    visit icmp
in slt
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit br
  <BB> if.end
    visit phi
tar: ibranch cond: (and true true (= (cmp i) #b1) (= (cmp1 i) #b1))
tar: #x00000000branch cond: (and true true (= (cmp i) #b0))
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun cmp ((_ BitVec 32)) (_ BitVec 1))
(declare-fun land.lhs.true ((_ BitVec 32)) Bool)
(declare-fun i () (_ BitVec 32))
(declare-fun cmp1 ((_ BitVec 32)) (_ BitVec 1))
(declare-fun if.else ((_ BitVec 32)) Bool)
(declare-fun if.then ((_ BitVec 32)) Bool)
(declare-fun if.end ((_ BitVec 32)) Bool)
(declare-fun x.0 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
  (and (and true true) (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp1 i) (ite (bvslt i #x00000400) #b1 #b0)))))
  (and true true (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
  (and (and true true) (= (cmp i) #b0) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.then i)
                (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.end i) (and (and true true) (= (cmp i) #b0) true)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (=> (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))
                 (= (x.0 i) i)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (=> (and (and true true) (= (cmp i) #b0)) (= (x.0 i) #x00000000)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (idxprom i) ((_ sign_extend 32) (x.0 i))))))
  (and true true (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
    (and (and true true) (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp1 i) (ite (bvslt i #x00000400) #b1 #b0)))))
    (and true true (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
    (and (and true true) (= (cmp i) #b0) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.then i)
                  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
    (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.end i) (and (and true true) (= (cmp i) #b0) true)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (=> (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))
                   (= (x.0 i) i)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (=> (and (and true true) (= (cmp i) #b0)) (= (x.0 i) #x00000000)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (idxprom i) ((_ sign_extend 32) (x.0 i))))))
    (and true true (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
---------
<Func> bar1: arg i
  <BB> entry
    visit and
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun and ((_ BitVec 32)) (_ BitVec 32))
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (and true true (forall ((i (_ BitVec 32))) (= (and i) (bvand i #x000007ff)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (idxprom i) ((_ sign_extend 32) (and i))))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (and true true (forall ((i (_ BitVec 32))) (= (and i) (bvand i #x000007ff))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (idxprom i) ((_ sign_extend 32) (and i))))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is potentially out of bound.
Model causing out of bound:
(define-fun and ((x!0 (_ BitVec 32))) (_ BitVec 32)
  (ite (= x!0 #x00000400) #x00000400
    (concat #b000000000000000000000 ((_ extract 10 0) x!0))))
(define-fun entry ((x!0 (_ BitVec 32))) Bool
  true)
(define-fun idxprom ((x!0 (_ BitVec 32))) (_ BitVec 64)
  (ite (= x!0 #x00000400) #x0000000000000400
    (concat ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            ((_ extract 31 31) (and x!0))
            (and x!0))))
---------
<Func> bar2: arg i
  <BB> entry
    visit icmp
    visit br
  <BB> land.lhs.true
    visit icmp
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun cmp ((_ BitVec 32)) (_ BitVec 1))
(declare-fun land.lhs.true ((_ BitVec 32)) Bool)
(declare-fun i () (_ BitVec 32))
(declare-fun cmp1 ((_ BitVec 32)) (_ BitVec 1))
(declare-fun if.else ((_ BitVec 32)) Bool)
(declare-fun if.then ((_ BitVec 32)) Bool)
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
  (and (and true true) (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp1 i) (ite (bvsle i #x00000400) #b1 #b0)))))
  (and true true (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
  (and (and true true) (= (cmp i) #b0) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.then i)
                (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1)))
(assert (and true
     true
     (= (cmp i) #b1)
     (= (cmp1 i) #b1)
     (forall ((i (_ BitVec 32))) (= (idxprom i) ((_ sign_extend 32) i)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
    (and (and true true) (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp1 i) (ite (bvsle i #x00000400) #b1 #b0)))))
    (and true true (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
    (and (and true true) (= (cmp i) #b0) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.then i)
                  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
    (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1))
  (and true
       true
       (= (cmp i) #b1)
       (= (cmp1 i) #b1)
       (forall ((i (_ BitVec 32))) (= (idxprom i) ((_ sign_extend 32) i))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
    visit br
  <BB> return
    visit phi
tar: (%0 i)branch cond: (and true true (= (cmp i) #b1) (= (cmp1 i) #b1))
tar: #xffffffffbranch cond: (and true true (= (cmp i) #b0))
---------
<Func> bar3: arg i
  <BB> entry
    visit icmp
    visit br
  <BB> land.lhs.true
    visit icmp
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit br
  <BB> if.end
    visit phi
tar: ibranch cond: (and true true (= (cmp i) #b1) (= (cmp1 i) #b1))
tar: #x00000000branch cond: (and true true (= (cmp i) #b0))
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun cmp ((_ BitVec 32)) (_ BitVec 1))
(declare-fun land.lhs.true ((_ BitVec 32)) Bool)
(declare-fun i () (_ BitVec 32))
(declare-fun cmp1 ((_ BitVec 32)) (_ BitVec 1))
(declare-fun if.else ((_ BitVec 32)) Bool)
(declare-fun if.then ((_ BitVec 32)) Bool)
(declare-fun if.end ((_ BitVec 32)) Bool)
(declare-fun x.0 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
  (and (and true true) (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp1 i) (ite (bvsle i #x00000400) #b1 #b0)))))
  (and true true (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
  (and (and true true) (= (cmp i) #b0) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.then i)
                (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.end i) (and (and true true) (= (cmp i) #b0) true)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (=> (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))
                 (= (x.0 i) i)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (=> (and (and true true) (= (cmp i) #b0)) (= (x.0 i) #x00000000)))))
  (and (and true true) (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (idxprom i) ((_ sign_extend 32) (x.0 i))))))
  (and true true (= (cmp i) #b0) true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp i) (ite (bvsge i #x00000000) #b1 #b0)))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (land.lhs.true i) (and (and true true) (= (cmp i) #b1))))))
    (and (and true true) (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp1 i) (ite (bvsle i #x00000400) #b1 #b0)))))
    (and true true (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
    (and (and true true) (= (cmp i) #b0) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.then i)
                  (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))))))
    (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.end i) (and (and true true) (= (cmp i) #b0) true)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (=> (and (and true true) (= (cmp i) #b1) (= (cmp1 i) #b1))
                   (= (x.0 i) i)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (=> (and (and true true) (= (cmp i) #b0)) (= (x.0 i) #x00000000)))))
    (and (and true true) (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (idxprom i) ((_ sign_extend 32) (x.0 i))))))
    (and true true (= (cmp i) #b0) true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
---------
<Func> interproc: arg i
  <BB> entry
    visit icmp
in slt
    visit br
  <BB> if.else
    visit br
  <BB> if.then
    visit sext
    visit gep
----<solver>--------
(declare-fun entry ((_ BitVec 32)) Bool)
(declare-fun call ((_ BitVec 32)) (_ BitVec 32))
(declare-fun cmp ((_ BitVec 32)) (_ BitVec 1))
(declare-fun if.else ((_ BitVec 32)) Bool)
(declare-fun i () (_ BitVec 32))
(declare-fun if.then ((_ BitVec 32)) Bool)
(declare-fun idxprom ((_ BitVec 32)) (_ BitVec 64))
(assert (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true)))))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (cmp i) (ite (bvslt (call i) #x00000400) #b1 #b0)))))
  (and true true a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
  (and (and true true) (= (cmp i) #b0) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (if.then i) (and (and true true) (= (cmp i) #b1))))))
  (and (and true true) (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (= (idxprom i) ((_ sign_extend 32) (call i))))))
  (and true true (= (cmp i) #b1) a!1)))
(assert (let ((a!1 (forall ((i (_ BitVec 32)))
             (and (bvsge (idxprom i) #x0000000000000000)
                  (bvslt (idxprom i) #x0000000000000400)))))
  (not a!1)))

-------------
Checking with assertions:
(ast-vector
  (and (and true true) (forall ((i (_ BitVec 32))) (= (entry i) (and true true))))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (cmp i) (ite (bvslt (call i) #x00000400) #b1 #b0)))))
    (and true true a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.else i) (and (and true true) (= (cmp i) #b0))))))
    (and (and true true) (= (cmp i) #b0) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (if.then i) (and (and true true) (= (cmp i) #b1))))))
    (and (and true true) (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (= (idxprom i) ((_ sign_extend 32) (call i))))))
    (and true true (= (cmp i) #b1) a!1))
  (let ((a!1 (forall ((i (_ BitVec 32)))
               (and (bvsge (idxprom i) #x0000000000000000)
                    (bvslt (idxprom i) #x0000000000000400)))))
    (not a!1)))
GEP arrayidx is safe.
    visit br
  <BB> return
    visit phi
tar: (%0 i)branch cond: (and true true (= (cmp i) #b1))
tar: #xffffffffbranch cond: (and true true (= (cmp i) #b0))
