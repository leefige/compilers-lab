Now walking the module...
new z3walker
<Module> selftest/foo-opt.ll, size is 4
<Func> foo: ; arg %0
  <BB> %1
    visit icmp
    visit br
  <BB> %6
    visit mul
    visit shl
    visit ashr
    visit br
  <BB> %3
    visit add
    visit sub
    visit br
  <BB> %12
    visit phi
------------
<Solver>
(declare-fun %0 () (_ BitVec 32))
(declare-fun %2 () (_ BitVec 1))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(declare-fun %10 () (_ BitVec 32))
(declare-fun %11 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 32))
(declare-fun %5 () (_ BitVec 32))
(assert (= %2 (ite (= %0 #x00000003) #b1 #b0)))
(assert (= %8 (bvmul %0 %7)))
(assert (= %10 (bvshl #x00000002 %0)))
(assert (= %11 (bvashr #x00000010 %0)))
(assert (= %4 (bvadd #x00000001 #x00000002)))
(assert (= %5 (bvsub %4 %0)))
============
<Func> foo1: ; arg %0
  <BB> %1
    visit sext
    visit gep
===check pushed===
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))

bound added
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))
(assert (not (and (bvsge %4 #x0000000000000000) (bvslt %4 #x0000000000000040))))

Checking with assertions:
(ast-vector
  (= %4 ((_ sign_extend 32) %0))
  (not (and (bvsge %4 #x0000000000000000) (bvslt %4 #x0000000000000040))))
GEP %5 is potentially out of bound.
Model causing out of bound:
(define-fun %4 () (_ BitVec 64)
  #x0000000020000000)
(define-fun %0 () (_ BitVec 32)
  #x20000000)
===check popped===
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))

    visit add
    visit and
    visit sext
    visit gep
===check pushed===
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(declare-fun %3 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(declare-fun %9 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))
(assert (= %7 (bvadd %6 %3)))
(assert (= %8 (bvand #x00000010 %0)))
(assert (= %9 ((_ sign_extend 32) %8)))

bound added
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(declare-fun %3 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(declare-fun %9 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))
(assert (= %7 (bvadd %6 %3)))
(assert (= %8 (bvand #x00000010 %0)))
(assert (= %9 ((_ sign_extend 32) %8)))
(assert (not (and (bvsge %9 #x0000000000000000) (bvslt %9 #x0000000000000040))))

Checking with assertions:
(ast-vector
  (= %4 ((_ sign_extend 32) %0))
  (= %7 (bvadd %6 %3))
  (= %8 (bvand #x00000010 %0))
  (= %9 ((_ sign_extend 32) %8))
  (not (and (bvsge %9 #x0000000000000000) (bvslt %9 #x0000000000000040))))
GEP %10 is safe.
===check popped===
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(declare-fun %3 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(declare-fun %9 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))
(assert (= %7 (bvadd %6 %3)))
(assert (= %8 (bvand #x00000010 %0)))
(assert (= %9 ((_ sign_extend 32) %8)))

------------
<Solver>
(declare-fun %0 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 64))
(declare-fun %3 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(declare-fun %9 () (_ BitVec 64))
(assert (= %4 ((_ sign_extend 32) %0)))
(assert (= %7 (bvadd %6 %3)))
(assert (= %8 (bvand #x00000010 %0)))
(assert (= %9 ((_ sign_extend 32) %8)))
============
<Func> bar: ; arg %0
  <BB> %1
    visit shl
    visit and
    visit or
    visit xor
------------
<Solver>
(declare-fun %2 () (_ BitVec 32))
(declare-fun %3 () (_ BitVec 32))
(declare-fun %4 () (_ BitVec 32))
(declare-fun %5 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(assert (= %3 (bvshl %2 #x00000004)))
(assert (= %5 (bvand #x00000020 %4)))
(assert (= %6 (bvor #x00000008 %3)))
(assert (= %8 (bvxor %7 %6)))
============
<Func> foobar: 
  <BB> %0
    visit and
    visit xor
------------
<Solver>
(declare-fun %4 () (_ BitVec 32))
(declare-fun %5 () (_ BitVec 32))
(declare-fun %6 () (_ BitVec 32))
(declare-fun %7 () (_ BitVec 32))
(declare-fun %8 () (_ BitVec 32))
(assert (= %5 (bvand %4 #x00000020)))
(assert (= %8 (bvxor %7 %6)))
============
