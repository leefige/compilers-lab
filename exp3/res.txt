new z3walker
<Module> selftest/foo-opt.ll, size is 5
---------
<Func> foo__: arg %0 arg %1
  <BB> %2
    visit icmp
    visit br
  <BB> %19
    visit and
    visit br
  <BB> %5
    visit xor
    visit add

    visit shl
    visit icmp
    visit br
  <BB> %16
    visit or
    visit br
  <BB> %10
    visit sext
    visit gep
Checking with assertions:
(ast-vector
  (and (= %4 (ite (bvsgt %0 #x00000000) #b1 #b0))
       (= %5 %4)
       (= %19 (ite (= %4 #b1) #b0 #b1))
       (= %20 (bvand %1 %0))
       (= %21 #b1)
       (= %6 (bvxor %1 %1))
       (= %7 (bvadd %6 %0))
       (= %8 (bvshl %7 #x00000001))
       (= %9 (ite (bvslt %8 #x00000040) #b1 #b0))
       (= %10 %9)
       (= %16 (ite (= %9 #b1) #b0 #b1))
       (= %17 (bvor %8 %0))
       (= %18 #b1)
       (= %11 ((_ sign_extend 32) %8))
       (not (and (bvsge %11 #x0000000000000000) (bvslt %11 #x0000000000000080)))))
GEP %12 is potentially out of bound.
Model causing out of bound:
(define-fun %17 () (_ BitVec 32)
  #xc0000000)
(define-fun %9 () (_ BitVec 1)
  #b1)
(define-fun %16 () (_ BitVec 1)
  #b0)
(define-fun %21 () (_ BitVec 1)
  #b1)
(define-fun %4 () (_ BitVec 1)
  #b1)
(define-fun %5 () (_ BitVec 1)
  #b1)
(define-fun %7 () (_ BitVec 32)
  #x40000000)
(define-fun %8 () (_ BitVec 32)
  #x80000000)
(define-fun %10 () (_ BitVec 1)
  #b1)
(define-fun %18 () (_ BitVec 1)
  #b1)
(define-fun %6 () (_ BitVec 32)
  #x00000000)
(define-fun %1 () (_ BitVec 32)
  #x40000000)
(define-fun %19 () (_ BitVec 1)
  #b0)
(define-fun %0 () (_ BitVec 32)
  #x40000000)
(define-fun %20 () (_ BitVec 32)
  #x40000000)
(define-fun %11 () (_ BitVec 64)
  #xffffffff80000000)
    visit add

    visit xor
    visit br
  <BB> %18
    visit phi
    visit br
  <BB> %21
    visit phi
---------
<Func> foo: arg %0
  <BB> %1
    visit icmp
    visit br
  <BB> %6
    visit mul
    visit shl
    visit ashr
    visit br
  <BB> %3
    visit add

    visit sub
    visit br
  <BB> %12
    visit phi
---------
<Func> foo1: arg %0
  <BB> %1
    visit sext
    visit gep
Checking with assertions:
(ast-vector
  (and (= %4 ((_ sign_extend 32) %0))
       (not (and (bvsge %4 #x0000000000000000) (bvslt %4 #x0000000000000040)))))
GEP %5 is potentially out of bound.
Model causing out of bound:
(define-fun %4 () (_ BitVec 64)
  #xffffffff80000000)
(define-fun %0 () (_ BitVec 32)
  #x80000000)
    visit add

    visit sext
    visit gep
Checking with assertions:
(ast-vector
  (and (= %4 ((_ sign_extend 32) %0))
       (= %7 (bvadd %6 %3))
       (= %8 ((_ sign_extend 32) %0))
       (not (and (bvsge %8 #x0000000000000000) (bvslt %8 #x0000000000000040)))))
GEP %9 is potentially out of bound.
Model causing out of bound:
(define-fun %4 () (_ BitVec 64)
  #xffffffff80000000)
(define-fun %0 () (_ BitVec 32)
  #x80000000)
(define-fun %7 () (_ BitVec 32)
  #x00000000)
(define-fun %6 () (_ BitVec 32)
  #x00000000)
(define-fun %3 () (_ BitVec 32)
  #x00000000)
(define-fun %8 () (_ BitVec 64)
  #xffffffff80000000)
---------
<Func> bar: arg %0
  <BB> %1
    visit shl
    visit and
    visit or
    visit xor
---------
<Func> foobar:
  <BB> %0
    visit and
    visit xor
